import disnake
from disnake.ext import commands

import app.database.requests as request
from app.database.models import create_all
from datetime import datetime
from app.roles import member_has_main_role, role_update
import logging
from disnake.guild import Member, Guild
from disnake.mentions import AllowedMentions
import random
from urllib.parse import parse_qsl


logger = logging.getLogger(__name__)

bot = commands.Bot(command_prefix="!", help_command=None, intents=disnake.Intents.default() | disnake.Intents.members | disnake.Intents.message_content)

CHANNELS_WITH_REACTIONS = set()
# 1372570283994517584, 1372570325945942097,
# 1374057088984023050, 1374057143983931544


async def update_channels_with_reactions():
    global CHANNELS_WITH_REACTIONS
    CHANNELS_WITH_REACTIONS = await request.get_channels_ids_with_reactions()


CHANNELS_CAN_ASK_BALANCE = set()
# 1375209573526278195


async def update_channels_with_balance_ask():
    global CHANNELS_CAN_ASK_BALANCE
    CHANNELS_CAN_ASK_BALANCE = await request.get_channels_ids_with_balance_ask()


ADMIN_USERS = {
    930442023423574049,
    1110971796427132951
}


async def update_cached_values():
    await update_channels_with_reactions()
    await update_channels_with_balance_ask()


@bot.event
async def on_ready():
    await create_all()
    await update_cached_values()
    print(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


@bot.event
async def on_raw_reaction_add(payload):
    logger.debug('on_raw_reaction_add start')
    if payload.channel_id in CHANNELS_WITH_REACTIONS and payload.emoji.name == '‚úÖ':
        guild: Guild = bot.get_guild(payload.guild_id)
        member: Member = guild.get_member(payload.user_id)
        if member and member_has_main_role(member) and payload.message_author_id != payload.user_id:
            await request.add_user_reaction(
                message_id=payload.message_id,
                message_author_id=payload.message_author_id,
                user_id=payload.user_id
            )
            logger.info(
                f'–†–µ–∞–∫—Ü–∏—è {member.name} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {payload.message_id} –∞–≤—Ç–æ—Ä–∞ {payload.message_author_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
            )
        else:
            logger.info(
                f'–†–µ–∞–∫—Ü–∏—è {member.name} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {payload.message_id} –∞–≤—Ç–æ—Ä–∞ {payload.message_author_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è'
            )
    logger.debug('on_raw_reaction_add end')


@bot.event
async def on_raw_reaction_remove(payload):
    logger.debug('on_raw_reaction_remove start')
    if payload.channel_id in CHANNELS_WITH_REACTIONS and payload.emoji.name == '‚úÖ':
        guild: Guild = bot.get_guild(payload.guild_id)
        member: Member = guild.get_member(payload.user_id)
        if member and member_has_main_role(member) and payload.message_author_id != payload.user_id:
            await request.delete_user_reaction(
                message_id=payload.message_id,
                user_id=payload.user_id
            )
            logger.info(
                f'–†–µ–∞–∫—Ü–∏—è {member.name} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {payload.message_id} –∞–≤—Ç–æ—Ä–∞ {payload.message_author_id} —É–¥–∞–ª–µ–Ω–∞'
            )
        else:
            logger.info(
                f'–†–µ–∞–∫—Ü–∏—è {member.name} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {payload.message_id} –∞–≤—Ç–æ—Ä–∞ {payload.message_author_id} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è'
            )


@bot.event
async def on_member_join(member):
    await request.add_user_balance(
        user_id=member.id,
    )


@bot.command(name='–±–∞–ª–∞–Ω—Å', description='–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å')
async def balance(ctx, member: disnake.Member = None):

    if ctx.channel.id not in CHANNELS_CAN_ASK_BALANCE:
        return

    if member is None:
        member = ctx.author

    user_id = member.id
    user_balance = await request.get_balance(user_id)

    await role_update(member, user_balance)

    await ctx.send(
        f"{member.mention} \n\n ‚ú® **–í–∞—à –±–∞–ª–∞–Ω—Å** ‚ú®\n\n"
        f"üéØ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{user_balance}** üí∞\n\n"
        f"üóìÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.utcnow().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        f"üîÑ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏!", delete_after=60
    )

    await ctx.message.delete()
    await role_update(member, user_balance)

transfer_text_templates = [
    'üéâ {sender} –ø–µ—Ä–µ–≤–µ–ª {receiver} ‚Äî {amount} –±–∞–ª–ª–æ–≤ ‚ú®',
    'üöÄ {sender} ‚Äî –ø–µ—Ä–µ–≤–µ–ª {receiver} | {amount} –±–∞–ª–ª–æ–≤ üî•',
    '‚≠êÔ∏è {sender} / {receiver} ‚Äî {amount} –±–∞–ª–ª–æ–≤ üíØ',
    'üéØ {sender} | –ø–µ—Ä–µ–≤–µ–ª {receiver} ‚Äî {amount} –±–∞–ª–ª–æ–≤ üåü',
    'üèÜ {sender}: –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {receiver} ‚Äî {amount} –±–∞–ª–ª–æ–≤ üéñÔ∏è',
    'üî• {sender} ‚Üí {receiver} | {amount} –±–∞–ª–ª–æ–≤ üí•',
    'üåà {sender} | {receiver} ‚Äî {amount} –±–∞–ª–ª–æ–≤ ‚ú®',
    'üí´ {sender} (–ø–µ—Ä–µ–≤–æ–¥) {receiver}: {amount} –±–∞–ª–ª–æ–≤ üöÄ',
    'üéà {sender} | –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {receiver} ‚Äî {amount} –±–∞–ª–ª–æ–≤ üéâ',
    'ü•á {sender} ‚Äî –ø–µ—Ä–µ–≤–µ–ª {receiver} | {amount} –±–∞–ª–ª–æ–≤ üåü'
]


def make_successful_transfer_text(sender: str, receiver: str, amount: int) -> str:
    return random.choice(transfer_text_templates).format(sender=sender, receiver=receiver, amount=amount)


@bot.command(name='–ø–µ—Ä–µ–¥–∞—Ç—å', description='–ü–µ—Ä–µ–¥–∞—Ç—å –±–∞–ª–ª—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –Ω–∏–∫—É')
async def transfer(ctx: commands.Context, member_name: str, amount: int):
    sender_id = ctx.author.id
    mentioned_users = [mention for mention in ctx.message.mentions if isinstance(mention, Member)]
    if not mentioned_users or len(mentioned_users) > 1:
        await ctx.send(
            f"‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            f"üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ø–æ–º—è–Ω—É—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\n",
            delete_after=60
        )
        await ctx.message.delete()
        return
    receiver_member: Member = mentioned_users[0]

    receiver_user_id = receiver_member.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender_balance = await request.get_balance(sender_id)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    receiver_balance = await request.get_balance(receiver_user_id)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    success = await request.transfer_balance(sender_id, receiver_user_id, amount)

    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–æ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await role_update(ctx.author, sender_balance-amount)
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–æ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        await role_update(receiver_member, receiver_balance+amount)
        await ctx.send(
            content=make_successful_transfer_text(ctx.author.mention, receiver_member.mention, amount),
            allowed_mentions=AllowedMentions.none()
        )
        await ctx.message.delete()
    else:
        await ctx.send(
            f"‚ùå **–û—à–∏–±–∫–∞!**\n\n"
            f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.\n\n"
            f"üßæ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{sender_balance}** –±–∞–ª–ª–æ–≤.",
            delete_after=60
        )
        await ctx.message.delete()


@bot.command(name='—Ç–∞–±–ª–∏—Ü–∞', description='–í—ã–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –±–∞–ª–∞–Ω—Å–æ–≤')
async def table_command(ctx: commands.Context):
    if ctx.author.id not in ADMIN_USERS:
        return
    guild = ctx.message.guild
    all_balances = await request.get_all_balances()

    rows = []
    for user_balance in all_balances:
        member = guild.get_member(user_balance.user_id)
        if not member:
            continue
        await role_update(member, user_balance.user_balance)
        rows.append(f'{member.name}: {user_balance.user_balance}')

    await ctx.send(
        f"‚ùå **–£—á–∞—Å—Ç–Ω–∏–∫–∏**\n\n"+'\n'.join(rows),
    )


@bot.command(name='–æ–±–Ω–æ–≤–∏—Ç—å—Ä–æ–ª–∏', description='–û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def update_roles_command(ctx: commands.Context):
    if ctx.author.id not in ADMIN_USERS:
        return
    guild = ctx.message.guild
    all_balances = await request.get_all_balances()

    rows = []
    for user_balance in all_balances:
        member = guild.get_member(user_balance.user_id)
        if not member:
            continue
        report = await role_update(member, user_balance.user_balance)
        if report:
            rows.append(report)
    if rows:
        await ctx.send(
            f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏**\n\n" + '\n'.join(rows)
        )
    else:
        await ctx.send(
            f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å",
            delete_after=10,
        )


@bot.command(name='–∫–∞–Ω–∞–ª', description='–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–∞')
async def show_channel_descr(ctx: commands.Context, channel_id: int):
    if ctx.author.id not in ADMIN_USERS:
        return

    channel = await request.get_channel_by_id(channel_id)
    await ctx.send(
        str(channel),
        delete_after=10,
    )


@bot.command(name='–æ–±–Ω–æ–≤–∏—Ç—å–∫–∞–Ω–∞–ª', description='–û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ')
async def update_channel(ctx: commands.Context, channel_id: int, *, arg):
    if ctx.author.id not in ADMIN_USERS:
        return
    params = dict()
    expected_keys = ['can_ask_balance', 'reactions_tracked']
    for k, v in parse_qsl(arg):
        if k in expected_keys:
            params[k] = bool(v)
    channel = await request.update_channel(channel_id, **params)
    await ctx.send(
        str(channel),
        delete_after=10,
    )
    await update_cached_values()

